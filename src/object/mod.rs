// This file is generated. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

// Some hand-edited stuff. Le sigh
pub mod credential;
pub mod domain;
pub mod org_unit;
pub mod root;
pub mod system;

use objecthash::{self, ObjectHash, ObjectHasher};

// Back to your regularly scheduled autogenerated stuff
use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(Clone,Default)]
pub struct Object {
    // message oneof groups
    value: ::std::option::Option<Object_oneof_value>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::std::cell::Cell<u32>,
}

// see codegen.rs for the explanation why impl Sync explicitly
unsafe impl ::std::marker::Sync for Object {}

#[derive(Clone,PartialEq)]
pub enum Object_oneof_value {
    root(self::root::Root),
    domain(self::domain::Domain),
    org_unit(self::org_unit::OrgUnit),
    system(self::system::System),
    credential(self::credential::Credential),
}

impl Object {
    pub fn new() -> Object {
        ::std::default::Default::default()
    }

    pub fn default_instance() -> &'static Object {
        static mut instance: ::protobuf::lazy::Lazy<Object> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Object,
        };
        unsafe {
            instance.get(|| {
                Object {
                    value: ::std::option::Option::None,
                    unknown_fields: ::protobuf::UnknownFields::new(),
                    cached_size: ::std::cell::Cell::new(0),
                }
            })
        }
    }

    // optional .ithos.object.Root root = 1;

    pub fn clear_root(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_root(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::root(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_root(&mut self, v: self::root::Root) {
        self.value = ::std::option::Option::Some(Object_oneof_value::root(v))
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_root(&mut self) -> &mut self::root::Root {
        if let ::std::option::Option::Some(Object_oneof_value::root(_)) = self.value {
        } else {
            self.value =
                ::std::option::Option::Some(Object_oneof_value::root(self::root::Root::new()));
        }
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::root(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_root(&mut self) -> self::root::Root {
        if self.has_root() {
            match self.value.take() {
                ::std::option::Option::Some(Object_oneof_value::root(v)) => v,
                _ => panic!(),
            }
        } else {
            self::root::Root::new()
        }
    }

    pub fn get_root(&self) -> &self::root::Root {
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::root(ref v)) => v,
            _ => self::root::Root::default_instance(),
        }
    }

    // optional .ithos.object.Domain domain = 2;

    pub fn clear_domain(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_domain(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::domain(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_domain(&mut self, v: self::domain::Domain) {
        self.value = ::std::option::Option::Some(Object_oneof_value::domain(v))
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_domain(&mut self) -> &mut self::domain::Domain {
        if let ::std::option::Option::Some(Object_oneof_value::domain(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(Object_oneof_value::domain(self::domain::Domain::new()));
        }
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::domain(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_domain(&mut self) -> self::domain::Domain {
        if self.has_domain() {
            match self.value.take() {
                ::std::option::Option::Some(Object_oneof_value::domain(v)) => v,
                _ => panic!(),
            }
        } else {
            self::domain::Domain::new()
        }
    }

    pub fn get_domain(&self) -> &self::domain::Domain {
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::domain(ref v)) => v,
            _ => self::domain::Domain::default_instance(),
        }
    }

    // optional .ithos.object.OrgUnit org_unit = 3;

    pub fn clear_org_unit(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_org_unit(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::org_unit(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_org_unit(&mut self, v: self::org_unit::OrgUnit) {
        self.value = ::std::option::Option::Some(Object_oneof_value::org_unit(v))
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_org_unit(&mut self) -> &mut self::org_unit::OrgUnit {
        if let ::std::option::Option::Some(Object_oneof_value::org_unit(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(Object_oneof_value::org_unit(self::org_unit::OrgUnit::new()));
        }
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::org_unit(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_org_unit(&mut self) -> self::org_unit::OrgUnit {
        if self.has_org_unit() {
            match self.value.take() {
                ::std::option::Option::Some(Object_oneof_value::org_unit(v)) => v,
                _ => panic!(),
            }
        } else {
            self::org_unit::OrgUnit::new()
        }
    }

    pub fn get_org_unit(&self) -> &self::org_unit::OrgUnit {
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::org_unit(ref v)) => v,
            _ => self::org_unit::OrgUnit::default_instance(),
        }
    }

    // optional .ithos.object.System system = 4;

    pub fn clear_system(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_system(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::system(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_system(&mut self, v: self::system::System) {
        self.value = ::std::option::Option::Some(Object_oneof_value::system(v))
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_system(&mut self) -> &mut self::system::System {
        if let ::std::option::Option::Some(Object_oneof_value::system(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(Object_oneof_value::system(self::system::System::new()));
        }
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::system(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_system(&mut self) -> self::system::System {
        if self.has_system() {
            match self.value.take() {
                ::std::option::Option::Some(Object_oneof_value::system(v)) => v,
                _ => panic!(),
            }
        } else {
            self::system::System::new()
        }
    }

    pub fn get_system(&self) -> &self::system::System {
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::system(ref v)) => v,
            _ => self::system::System::default_instance(),
        }
    }

    // optional .ithos.object.Credential credential = 5;

    pub fn clear_credential(&mut self) {
        self.value = ::std::option::Option::None;
    }

    pub fn has_credential(&self) -> bool {
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::credential(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_credential(&mut self, v: self::credential::Credential) {
        self.value = ::std::option::Option::Some(Object_oneof_value::credential(v))
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_credential(&mut self) -> &mut self::credential::Credential {
        if let ::std::option::Option::Some(Object_oneof_value::credential(_)) = self.value {
        } else {
            self.value = ::std::option::Option::Some(Object_oneof_value::credential(self::credential::Credential::new()));
        }
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::credential(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_credential(&mut self) -> self::credential::Credential {
        if self.has_credential() {
            match self.value.take() {
                ::std::option::Option::Some(Object_oneof_value::credential(v)) => v,
                _ => panic!(),
            }
        } else {
            self::credential::Credential::new()
        }
    }

    pub fn get_credential(&self) -> &self::credential::Credential {
        match self.value {
            ::std::option::Option::Some(Object_oneof_value::credential(ref v)) => v,
            _ => self::credential::Credential::default_instance(),
        }
    }
}

impl ::protobuf::Message for Object {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self,
                  is: &mut ::protobuf::CodedInputStream)
                  -> ::protobuf::ProtobufResult<()> {
        while !try!(is.eof()) {
            let (field_number, wire_type) = try!(is.read_tag_unpack());
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value = ::std::option::Option::Some(Object_oneof_value::root(try!(is.read_message())));
                }
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value = ::std::option::Option::Some(Object_oneof_value::domain(try!(is.read_message())));
                }
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value = ::std::option::Option::Some(Object_oneof_value::org_unit(try!(is.read_message())));
                }
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value = ::std::option::Option::Some(Object_oneof_value::system(try!(is.read_message())));
                }
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    };
                    self.value = ::std::option::Option::Some(Object_oneof_value::credential(try!(is.read_message())));
                }
                _ => {
                    try!(::protobuf::rt::read_unknown_or_skip_group(field_number,
                                                                    wire_type,
                                                                    is,
                                                                    self.mut_unknown_fields()));
                }
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &Object_oneof_value::root(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                }
                &Object_oneof_value::domain(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                }
                &Object_oneof_value::org_unit(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                }
                &Object_oneof_value::system(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                }
                &Object_oneof_value::credential(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                }
            };
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self,
                                  os: &mut ::protobuf::CodedOutputStream)
                                  -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.value {
            match v {
                &Object_oneof_value::root(ref v) => {
                    try!(os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited));
                    try!(os.write_raw_varint32(v.get_cached_size()));
                    try!(v.write_to_with_cached_sizes(os));
                }
                &Object_oneof_value::domain(ref v) => {
                    try!(os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited));
                    try!(os.write_raw_varint32(v.get_cached_size()));
                    try!(v.write_to_with_cached_sizes(os));
                }
                &Object_oneof_value::org_unit(ref v) => {
                    try!(os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited));
                    try!(os.write_raw_varint32(v.get_cached_size()));
                    try!(v.write_to_with_cached_sizes(os));
                }
                &Object_oneof_value::system(ref v) => {
                    try!(os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited));
                    try!(os.write_raw_varint32(v.get_cached_size()));
                    try!(v.write_to_with_cached_sizes(os));
                }
                &Object_oneof_value::credential(ref v) => {
                    try!(os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited));
                    try!(os.write_raw_varint32(v.get_cached_size()));
                    try!(v.write_to_with_cached_sizes(os));
                }
            };
        };
        try!(os.write_unknown_fields(self.get_unknown_fields()));
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn type_id(&self) -> ::std::any::TypeId {
        ::std::any::TypeId::of::<Object>()
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        ::protobuf::MessageStatic::descriptor_static(None::<Self>)
    }
}

impl ::protobuf::MessageStatic for Object {
    fn new() -> Object {
        Object::new()
    }

    fn descriptor_static(_: ::std::option::Option<Object>)
                         -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> =
            ::protobuf::lazy::Lazy {
                lock: ::protobuf::lazy::ONCE_INIT,
                ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
            };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "root",
                    Object::has_root,
                    Object::get_root,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "domain",
                    Object::has_domain,
                    Object::get_domain,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "org_unit",
                    Object::has_org_unit,
                    Object::get_org_unit,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "system",
                    Object::has_system,
                    Object::get_system,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor(
                    "credential",
                    Object::has_credential,
                    Object::get_credential,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Object>("Object",
                                                                      fields,
                                                                      file_descriptor_proto())
            })
        }
    }
}

impl ::protobuf::Clear for Object {
    fn clear(&mut self) {
        self.clear_root();
        self.clear_domain();
        self.clear_org_unit();
        self.clear_system();
        self.clear_credential();
        self.unknown_fields.clear();
    }
}

impl ::std::cmp::PartialEq for Object {
    fn eq(&self, other: &Object) -> bool {
        self.value == other.value && self.unknown_fields == other.unknown_fields
    }
}

impl ::std::fmt::Debug for Object {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

static file_descriptor_proto_data: &'static [u8] =
    &[0x0a, 0x0c, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
      0x05, 0x69, 0x74, 0x68, 0x6f, 0x73, 0x1a, 0x17, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f,
      0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
      0x6f, 0x1a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
      0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
      0x2f, 0x6f, 0x72, 0x67, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
      0x1a, 0x11, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x72, 0x6f, 0x6f, 0x74, 0x2e, 0x70,
      0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x73, 0x79,
      0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x02, 0x0a, 0x06,
      0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18,
      0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x74, 0x68, 0x6f, 0x73, 0x2e, 0x6f,
      0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x00, 0x52, 0x04, 0x72,
      0x6f, 0x6f, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02,
      0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x74, 0x68, 0x6f, 0x73, 0x2e, 0x6f, 0x62,
      0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x06,
      0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x08, 0x6f, 0x72, 0x67, 0x5f, 0x75,
      0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x69, 0x74, 0x68,
      0x6f, 0x73, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4f, 0x72, 0x67, 0x55, 0x6e,
      0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x67, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x2e,
      0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
      0x14, 0x2e, 0x69, 0x74, 0x68, 0x6f, 0x73, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e,
      0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65,
      0x6d, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
      0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x69, 0x74, 0x68, 0x6f, 0x73, 0x2e,
      0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
      0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
      0x6c, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x9a, 0x03, 0x0a, 0x06,
      0x12, 0x04, 0x00, 0x00, 0x12, 0x01, 0x0a, 0x08, 0x0a, 0x01, 0x0c, 0x12, 0x03, 0x00, 0x00,
      0x12, 0x0a, 0x08, 0x0a, 0x01, 0x02, 0x12, 0x03, 0x02, 0x08, 0x0d, 0x0a, 0x09, 0x0a, 0x02,
      0x03, 0x00, 0x12, 0x03, 0x04, 0x07, 0x20, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x01, 0x12, 0x03,
      0x05, 0x07, 0x1c, 0x0a, 0x09, 0x0a, 0x02, 0x03, 0x02, 0x12, 0x03, 0x06, 0x07, 0x1e, 0x0a,
      0x09, 0x0a, 0x02, 0x03, 0x03, 0x12, 0x03, 0x07, 0x07, 0x1a, 0x0a, 0x09, 0x0a, 0x02, 0x03,
      0x04, 0x12, 0x03, 0x08, 0x07, 0x1c, 0x0a, 0x0a, 0x0a, 0x02, 0x04, 0x00, 0x12, 0x04, 0x0a,
      0x00, 0x12, 0x01, 0x0a, 0x0a, 0x0a, 0x03, 0x04, 0x00, 0x01, 0x12, 0x03, 0x0a, 0x08, 0x0e,
      0x0a, 0x0c, 0x0a, 0x04, 0x04, 0x00, 0x08, 0x00, 0x12, 0x04, 0x0b, 0x02, 0x11, 0x03, 0x0a,
      0x0c, 0x0a, 0x05, 0x04, 0x00, 0x08, 0x00, 0x01, 0x12, 0x03, 0x0b, 0x08, 0x0d, 0x0a, 0x0b,
      0x0a, 0x04, 0x04, 0x00, 0x02, 0x00, 0x12, 0x03, 0x0c, 0x04, 0x2b, 0x0a, 0x0c, 0x0a, 0x05,
      0x04, 0x00, 0x02, 0x00, 0x06, 0x12, 0x03, 0x0c, 0x04, 0x15, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
      0x00, 0x02, 0x00, 0x01, 0x12, 0x03, 0x0c, 0x1c, 0x20, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
      0x02, 0x00, 0x03, 0x12, 0x03, 0x0c, 0x29, 0x2a, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02,
      0x01, 0x12, 0x03, 0x0d, 0x04, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x06,
      0x12, 0x03, 0x0d, 0x04, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x01, 0x12,
      0x03, 0x0d, 0x1c, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x01, 0x03, 0x12, 0x03,
      0x0d, 0x29, 0x2a, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02, 0x02, 0x12, 0x03, 0x0e, 0x04,
      0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x06, 0x12, 0x03, 0x0e, 0x04, 0x18,
      0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x01, 0x12, 0x03, 0x0e, 0x1c, 0x24, 0x0a,
      0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x02, 0x03, 0x12, 0x03, 0x0e, 0x29, 0x2a, 0x0a, 0x0b,
      0x0a, 0x04, 0x04, 0x00, 0x02, 0x03, 0x12, 0x03, 0x0f, 0x04, 0x2b, 0x0a, 0x0c, 0x0a, 0x05,
      0x04, 0x00, 0x02, 0x03, 0x06, 0x12, 0x03, 0x0f, 0x04, 0x17, 0x0a, 0x0c, 0x0a, 0x05, 0x04,
      0x00, 0x02, 0x03, 0x01, 0x12, 0x03, 0x0f, 0x1c, 0x22, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00,
      0x02, 0x03, 0x03, 0x12, 0x03, 0x0f, 0x29, 0x2a, 0x0a, 0x0b, 0x0a, 0x04, 0x04, 0x00, 0x02,
      0x04, 0x12, 0x03, 0x10, 0x04, 0x2b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x06,
      0x12, 0x03, 0x10, 0x04, 0x1b, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x01, 0x12,
      0x03, 0x10, 0x1c, 0x26, 0x0a, 0x0c, 0x0a, 0x05, 0x04, 0x00, 0x02, 0x04, 0x03, 0x12, 0x03,
      0x10, 0x29, 0x2a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33];

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe { file_descriptor_proto_lazy.get(|| parse_descriptor_proto()) }
}

// TODO: Hand edited! Figure out a better solution for objecthash support
impl ObjectHash for Object {
    fn objecthash<H: ObjectHasher>(&self, _hasher: &mut H) {
        // TODO: Actually implement ObjectHash for Object!
    }
}
