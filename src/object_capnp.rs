// Generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: object.capnp


pub mod object {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data, Result};
  use capnp::private::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  #[derive(Copy, Clone)]
  pub struct Owned;
  impl <'a> ::capnp::traits::Owned<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl <'a> ::capnp::traits::OwnedStruct<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> { reader: layout::StructReader<'a> }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructReader<'a> for Reader<'a,>  {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a,> {
      Reader { reader: reader,  }
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>) -> Result<Reader<'a,>> {
      ::std::result::Result::Ok(::capnp::traits::FromStructReader::new(try!(reader.get_struct(::std::ptr::null()))))
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn borrow<'b>(&'b self) -> Reader<'b,> {
      Reader { .. *self }
    }

    pub fn total_size(&self) -> Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_value(self) -> ::object_capnp::object::value::Reader<'a> {
      ::capnp::traits::FromStructReader::new(self.reader)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    #[inline]
    fn struct_size() -> layout::StructSize { _private::STRUCT_SIZE }
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructBuilder<'a> for Builder<'a,>  {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a, > {
      Builder { builder: builder,  }
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a,> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>) -> Result<Builder<'a,>> {
      ::std::result::Result::Ok(::capnp::traits::FromStructBuilder::new(try!(builder.get_struct(_private::STRUCT_SIZE, ::std::ptr::null()))))
    }
  }

  impl <'a,> ::capnp::traits::SetPointerBuilder<Builder<'a,>> for Reader<'a,>  {
    fn set_pointer_builder<'b>(pointer: ::capnp::private::layout::PointerBuilder<'b>, value: Reader<'a,>) -> Result<()> { pointer.set_struct(&value.reader) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn as_reader(self) -> Reader<'a,> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    pub fn borrow<'b>(&'b mut self) -> Builder<'b,> {
      Builder { .. *self }
    }
    pub fn borrow_as_reader<'b>(&'b self) -> Reader<'b,> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }

    pub fn total_size(&self) -> Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_value(self) -> ::object_capnp::object::value::Builder<'a> {
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
    #[inline]
    pub fn init_value(self, ) -> ::object_capnp::object::value::Builder<'a> {
      self.builder.set_data_field::<u16>(0, 0);
      self.builder.get_pointer_field(0).clear();
      ::capnp::traits::FromStructBuilder::new(self.builder)
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
    pub fn get_value(&self) -> ::object_capnp::object::value::Pipeline {
      FromTypelessPipeline::new(self._typeless.noop())
    }
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 1 };
    pub const TYPE_ID: u64 = 0xc6750092108c1fa3;
  }

  pub mod value {
    #![allow(unused_imports)]
    use capnp::capability::{FromClientHook, FromTypelessPipeline};
    use capnp::{text, data, Result};
    use capnp::private::layout;
    use capnp::traits::{FromStructBuilder, FromStructReader};
    use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

    pub use self::Which::{Root,Domain,OrgUnit,System,Credential};

    #[derive(Copy, Clone)]
    pub struct Owned;
    impl <'a> ::capnp::traits::Owned<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
    impl <'a> ::capnp::traits::OwnedStruct<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
    impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

    #[derive(Clone, Copy)]
    pub struct Reader<'a> { reader: layout::StructReader<'a> }

    impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
      #[inline]
      fn type_id() -> u64 { _private::TYPE_ID }
    }
    impl <'a,> ::capnp::traits::FromStructReader<'a> for Reader<'a,>  {
      fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a,> {
        Reader { reader: reader,  }
      }
    }

    impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
      fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>) -> Result<Reader<'a,>> {
        ::std::result::Result::Ok(::capnp::traits::FromStructReader::new(try!(reader.get_struct(::std::ptr::null()))))
      }
    }

    impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
      fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
        self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
      }
    }

    impl <'a,> Reader<'a,>  {
      pub fn borrow<'b>(&'b self) -> Reader<'b,> {
        Reader { .. *self }
      }

      pub fn total_size(&self) -> Result<::capnp::MessageSize> {
        self.reader.total_size()
      }
      pub fn has_root(&self) -> bool {
        if self.reader.get_data_field::<u16>(0) != 0 { return false; }
        !self.reader.get_pointer_field(0).is_null()
      }
      pub fn has_domain(&self) -> bool {
        if self.reader.get_data_field::<u16>(0) != 1 { return false; }
        !self.reader.get_pointer_field(0).is_null()
      }
      pub fn has_org_unit(&self) -> bool {
        if self.reader.get_data_field::<u16>(0) != 2 { return false; }
        !self.reader.get_pointer_field(0).is_null()
      }
      pub fn has_system(&self) -> bool {
        if self.reader.get_data_field::<u16>(0) != 3 { return false; }
        !self.reader.get_pointer_field(0).is_null()
      }
      pub fn has_credential(&self) -> bool {
        if self.reader.get_data_field::<u16>(0) != 4 { return false; }
        !self.reader.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn which(self) -> ::std::result::Result<WhichReader<'a,>, ::capnp::NotInSchema> {
        match self.reader.get_data_field::<u16>(0) {
          0 => {
            return ::std::result::Result::Ok(Root(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0))
            ));
          }
          1 => {
            return ::std::result::Result::Ok(Domain(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0))
            ));
          }
          2 => {
            return ::std::result::Result::Ok(OrgUnit(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0))
            ));
          }
          3 => {
            return ::std::result::Result::Ok(System(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0))
            ));
          }
          4 => {
            return ::std::result::Result::Ok(Credential(
              ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0))
            ));
          }
          x => return ::std::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
    impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
      #[inline]
      fn struct_size() -> layout::StructSize { _private::STRUCT_SIZE }
    }
    impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
      #[inline]
      fn type_id() -> u64 { _private::TYPE_ID }
    }
    impl <'a,> ::capnp::traits::FromStructBuilder<'a> for Builder<'a,>  {
      fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a, > {
        Builder { builder: builder,  }
      }
    }

    impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
      fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
        self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
      }
    }

    impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
      fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a,> {
        ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
      }
      fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>) -> Result<Builder<'a,>> {
        ::std::result::Result::Ok(::capnp::traits::FromStructBuilder::new(try!(builder.get_struct(_private::STRUCT_SIZE, ::std::ptr::null()))))
      }
    }

    impl <'a,> ::capnp::traits::SetPointerBuilder<Builder<'a,>> for Reader<'a,>  {
      fn set_pointer_builder<'b>(pointer: ::capnp::private::layout::PointerBuilder<'b>, value: Reader<'a,>) -> Result<()> { pointer.set_struct(&value.reader) }
    }

    impl <'a,> Builder<'a,>  {
      pub fn as_reader(self) -> Reader<'a,> {
        ::capnp::traits::FromStructReader::new(self.builder.as_reader())
      }
      pub fn borrow<'b>(&'b mut self) -> Builder<'b,> {
        Builder { .. *self }
      }
      pub fn borrow_as_reader<'b>(&'b self) -> Reader<'b,> {
        ::capnp::traits::FromStructReader::new(self.builder.as_reader())
      }

      pub fn total_size(&self) -> Result<::capnp::MessageSize> {
        self.builder.as_reader().total_size()
      }
      #[inline]
      pub fn set_root<'b>(&mut self, value: ::root_capnp::root::Reader<'b>) -> Result<()> {
        self.builder.set_data_field::<u16>(0, 0);
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
      }
      #[inline]
      pub fn init_root(self, ) -> ::root_capnp::root::Builder<'a> {
        self.builder.set_data_field::<u16>(0, 0);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
      }
      pub fn has_root(&self) -> bool {
        if self.builder.get_data_field::<u16>(0) != 0 { return false; }
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn set_domain<'b>(&mut self, value: ::domain_capnp::domain::Reader<'b>) -> Result<()> {
        self.builder.set_data_field::<u16>(0, 1);
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
      }
      #[inline]
      pub fn init_domain(self, ) -> ::domain_capnp::domain::Builder<'a> {
        self.builder.set_data_field::<u16>(0, 1);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
      }
      pub fn has_domain(&self) -> bool {
        if self.builder.get_data_field::<u16>(0) != 1 { return false; }
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn set_org_unit<'b>(&mut self, value: ::org_unit_capnp::org_unit::Reader<'b>) -> Result<()> {
        self.builder.set_data_field::<u16>(0, 2);
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
      }
      #[inline]
      pub fn init_org_unit(self, ) -> ::org_unit_capnp::org_unit::Builder<'a> {
        self.builder.set_data_field::<u16>(0, 2);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
      }
      pub fn has_org_unit(&self) -> bool {
        if self.builder.get_data_field::<u16>(0) != 2 { return false; }
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn set_system<'b>(&mut self, value: ::system_capnp::system::Reader<'b>) -> Result<()> {
        self.builder.set_data_field::<u16>(0, 3);
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
      }
      #[inline]
      pub fn init_system(self, ) -> ::system_capnp::system::Builder<'a> {
        self.builder.set_data_field::<u16>(0, 3);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
      }
      pub fn has_system(&self) -> bool {
        if self.builder.get_data_field::<u16>(0) != 3 { return false; }
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn set_credential<'b>(&mut self, value: ::credential_capnp::credential::Reader<'b>) -> Result<()> {
        self.builder.set_data_field::<u16>(0, 4);
        ::capnp::traits::SetPointerBuilder::set_pointer_builder(self.builder.get_pointer_field(0), value)
      }
      #[inline]
      pub fn init_credential(self, ) -> ::credential_capnp::credential::Builder<'a> {
        self.builder.set_data_field::<u16>(0, 4);
        ::capnp::traits::FromPointerBuilder::init_pointer(self.builder.get_pointer_field(0), 0)
      }
      pub fn has_credential(&self) -> bool {
        if self.builder.get_data_field::<u16>(0) != 4 { return false; }
        !self.builder.get_pointer_field(0).is_null()
      }
      #[inline]
      pub fn which(self) -> ::std::result::Result<WhichBuilder<'a,>, ::capnp::NotInSchema> {
        match self.builder.get_data_field::<u16>(0) {
          0 => {
            return ::std::result::Result::Ok(Root(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0))
            ));
          }
          1 => {
            return ::std::result::Result::Ok(Domain(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0))
            ));
          }
          2 => {
            return ::std::result::Result::Ok(OrgUnit(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0))
            ));
          }
          3 => {
            return ::std::result::Result::Ok(System(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0))
            ));
          }
          4 => {
            return ::std::result::Result::Ok(Credential(
              ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0))
            ));
          }
          x => return ::std::result::Result::Err(::capnp::NotInSchema(x))
        }
      }
    }

    pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
    impl FromTypelessPipeline for Pipeline {
      fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
        Pipeline { _typeless: typeless,  }
      }
    }
    impl Pipeline  {
    }
    mod _private {
      use capnp::private::layout;
      pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 1, pointers: 1 };
      pub const TYPE_ID: u64 = 0xd89ab050dad0a6ae;
    }
    pub enum Which<A0,A1,A2,A3,A4> {
      Root(A0),
      Domain(A1),
      OrgUnit(A2),
      System(A3),
      Credential(A4),
    }
    pub type WhichReader<'a,> = Which<Result<::root_capnp::root::Reader<'a>>,Result<::domain_capnp::domain::Reader<'a>>,Result<::org_unit_capnp::org_unit::Reader<'a>>,Result<::system_capnp::system::Reader<'a>>,Result<::credential_capnp::credential::Reader<'a>>>;
    pub type WhichBuilder<'a,> = Which<Result<::root_capnp::root::Builder<'a>>,Result<::domain_capnp::domain::Builder<'a>>,Result<::org_unit_capnp::org_unit::Builder<'a>>,Result<::system_capnp::system::Builder<'a>>,Result<::credential_capnp::credential::Builder<'a>>>;
  }
}
