// Generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: object/credential.capnp


#[repr(u16)]
#[derive(Clone, Copy, PartialEq)]
pub enum Type {
  SignatureKeyPair = 0,
}
impl ::capnp::traits::FromU16 for Type {
  #[inline]
  fn from_u16(value: u16) -> ::std::result::Result<Type, ::capnp::NotInSchema> {
    match value {
      0 => ::std::result::Result::Ok(Type::SignatureKeyPair),
      n => ::std::result::Result::Err(::capnp::NotInSchema(n)),
    }
  }
}
impl ::capnp::traits::ToU16 for Type {
  #[inline]
  fn to_u16(self) -> u16 { self as u16 }
}
impl ::capnp::traits::HasTypeId for Type {
  #[inline]
  fn type_id() -> u64 { 0x89d700c7b3b83e5cu64 }
}

pub mod credential {
  #![allow(unused_imports)]
  use capnp::capability::{FromClientHook, FromTypelessPipeline};
  use capnp::{text, data, Result};
  use capnp::private::layout;
  use capnp::traits::{FromStructBuilder, FromStructReader};
  use capnp::{primitive_list, enum_list, struct_list, text_list, data_list, list_list};

  #[derive(Copy, Clone)]
  pub struct Owned;
  impl <'a> ::capnp::traits::Owned<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl <'a> ::capnp::traits::OwnedStruct<'a> for Owned { type Reader = Reader<'a>; type Builder = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  #[derive(Clone, Copy)]
  pub struct Reader<'a> { reader: layout::StructReader<'a> }

  impl <'a,> ::capnp::traits::HasTypeId for Reader<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructReader<'a> for Reader<'a,>  {
    fn new(reader: ::capnp::private::layout::StructReader<'a>) -> Reader<'a,> {
      Reader { reader: reader,  }
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>) -> Result<Reader<'a,>> {
      ::std::result::Result::Ok(::capnp::traits::FromStructReader::new(try!(reader.get_struct(::std::ptr::null()))))
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn borrow<'b>(&'b self) -> Reader<'b,> {
      Reader { .. *self }
    }

    pub fn total_size(&self) -> Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_keyid(self) -> Result<text::Reader<'a>> {
      self.reader.get_pointer_field(0).get_text(::std::ptr::null(), 0)
    }
    pub fn has_keyid(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_credential_type(self) -> ::std::result::Result<::credential_capnp::Type,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn get_credential_alg(self) -> Result<text::Reader<'a>> {
      self.reader.get_pointer_field(1).get_text(::std::ptr::null(), 0)
    }
    pub fn has_credential_alg(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_sealing_alg(self) -> ::std::result::Result<::alg_capnp::EncryptionAlg,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.reader.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn get_encrypted_value(self) -> Result<data::Reader<'a>> {
      self.reader.get_pointer_field(2).get_data(::std::ptr::null(), 0)
    }
    pub fn has_encrypted_value(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_salt(self) -> Result<data::Reader<'a>> {
      self.reader.get_pointer_field(3).get_data(::std::ptr::null(), 0)
    }
    pub fn has_salt(&self) -> bool {
      !self.reader.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_public_key(self) -> Result<data::Reader<'a>> {
      self.reader.get_pointer_field(4).get_data(::std::ptr::null(), 0)
    }
    pub fn has_public_key(&self) -> bool {
      !self.reader.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_not_before(self) -> u64 {
      self.reader.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn get_not_after(self) -> u64 {
      self.reader.get_data_field::<u64>(2)
    }
    #[inline]
    pub fn get_description(self) -> Result<text::Reader<'a>> {
      self.reader.get_pointer_field(5).get_text(::std::ptr::null(), 0)
    }
    pub fn has_description(&self) -> bool {
      !self.reader.get_pointer_field(5).is_null()
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <'a,> ::capnp::traits::HasStructSize for Builder<'a,>  {
    #[inline]
    fn struct_size() -> layout::StructSize { _private::STRUCT_SIZE }
  }
  impl <'a,> ::capnp::traits::HasTypeId for Builder<'a,>  {
    #[inline]
    fn type_id() -> u64 { _private::TYPE_ID }
  }
  impl <'a,> ::capnp::traits::FromStructBuilder<'a> for Builder<'a,>  {
    fn new(builder: ::capnp::private::layout::StructBuilder<'a>) -> Builder<'a, > {
      Builder { builder: builder,  }
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Builder<'a,> {
      ::capnp::traits::FromStructBuilder::new(builder.init_struct(_private::STRUCT_SIZE))
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>) -> Result<Builder<'a,>> {
      ::std::result::Result::Ok(::capnp::traits::FromStructBuilder::new(try!(builder.get_struct(_private::STRUCT_SIZE, ::std::ptr::null()))))
    }
  }

  impl <'a,> ::capnp::traits::SetPointerBuilder<Builder<'a,>> for Reader<'a,>  {
    fn set_pointer_builder<'b>(pointer: ::capnp::private::layout::PointerBuilder<'b>, value: Reader<'a,>) -> Result<()> { pointer.set_struct(&value.reader) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn as_reader(self) -> Reader<'a,> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }
    pub fn borrow<'b>(&'b mut self) -> Builder<'b,> {
      Builder { .. *self }
    }
    pub fn borrow_as_reader<'b>(&'b self) -> Reader<'b,> {
      ::capnp::traits::FromStructReader::new(self.builder.as_reader())
    }

    pub fn total_size(&self) -> Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_keyid(self) -> Result<text::Builder<'a>> {
      self.builder.get_pointer_field(0).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_keyid(&mut self, value: text::Reader)  {
      self.builder.get_pointer_field(0).set_text(value);
    }
    #[inline]
    pub fn init_keyid(self, size: u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(0).init_text(size)
    }
    pub fn has_keyid(&self) -> bool {
      !self.builder.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_credential_type(self) -> ::std::result::Result<::credential_capnp::Type,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn set_credential_type(&mut self, value: ::credential_capnp::Type)  {
      self.builder.set_data_field::<u16>(0, value as u16)
    }
    #[inline]
    pub fn get_credential_alg(self) -> Result<text::Builder<'a>> {
      self.builder.get_pointer_field(1).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_credential_alg(&mut self, value: text::Reader)  {
      self.builder.get_pointer_field(1).set_text(value);
    }
    #[inline]
    pub fn init_credential_alg(self, size: u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(1).init_text(size)
    }
    pub fn has_credential_alg(&self) -> bool {
      !self.builder.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_sealing_alg(self) -> ::std::result::Result<::alg_capnp::EncryptionAlg,::capnp::NotInSchema> {
      ::capnp::traits::FromU16::from_u16(self.builder.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn set_sealing_alg(&mut self, value: ::alg_capnp::EncryptionAlg)  {
      self.builder.set_data_field::<u16>(1, value as u16)
    }
    #[inline]
    pub fn get_encrypted_value(self) -> Result<data::Builder<'a>> {
      self.builder.get_pointer_field(2).get_data(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_encrypted_value(&mut self, value: data::Reader)  {
      self.builder.get_pointer_field(2).set_data(value);
    }
    #[inline]
    pub fn init_encrypted_value(self, size: u32) -> data::Builder<'a> {
      self.builder.get_pointer_field(2).init_data(size)
    }
    pub fn has_encrypted_value(&self) -> bool {
      !self.builder.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_salt(self) -> Result<data::Builder<'a>> {
      self.builder.get_pointer_field(3).get_data(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_salt(&mut self, value: data::Reader)  {
      self.builder.get_pointer_field(3).set_data(value);
    }
    #[inline]
    pub fn init_salt(self, size: u32) -> data::Builder<'a> {
      self.builder.get_pointer_field(3).init_data(size)
    }
    pub fn has_salt(&self) -> bool {
      !self.builder.get_pointer_field(3).is_null()
    }
    #[inline]
    pub fn get_public_key(self) -> Result<data::Builder<'a>> {
      self.builder.get_pointer_field(4).get_data(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_public_key(&mut self, value: data::Reader)  {
      self.builder.get_pointer_field(4).set_data(value);
    }
    #[inline]
    pub fn init_public_key(self, size: u32) -> data::Builder<'a> {
      self.builder.get_pointer_field(4).init_data(size)
    }
    pub fn has_public_key(&self) -> bool {
      !self.builder.get_pointer_field(4).is_null()
    }
    #[inline]
    pub fn get_not_before(self) -> u64 {
      self.builder.get_data_field::<u64>(1)
    }
    #[inline]
    pub fn set_not_before(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(1, value);
    }
    #[inline]
    pub fn get_not_after(self) -> u64 {
      self.builder.get_data_field::<u64>(2)
    }
    #[inline]
    pub fn set_not_after(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(2, value);
    }
    #[inline]
    pub fn get_description(self) -> Result<text::Builder<'a>> {
      self.builder.get_pointer_field(5).get_text(::std::ptr::null(), 0)
    }
    #[inline]
    pub fn set_description(&mut self, value: text::Reader)  {
      self.builder.get_pointer_field(5).set_text(value);
    }
    #[inline]
    pub fn init_description(self, size: u32) -> text::Builder<'a> {
      self.builder.get_pointer_field(5).init_text(size)
    }
    pub fn has_description(&self) -> bool {
      !self.builder.get_pointer_field(5).is_null()
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Pipeline {
      Pipeline { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    use capnp::private::layout;
    pub const STRUCT_SIZE: layout::StructSize = layout::StructSize { data: 3, pointers: 6 };
    pub const TYPE_ID: u64 = 0xc3a2b127408eb3ee;
  }
}
